import type { CompilerOptions } from "typescript";
import type { Config as BaseSWCConfig, JscTarget, ModuleConfig, ParserConfig } from "@swc/core";
type ReactConfig = {
    runtime?: "automatic" | "classic";
    importSource?: string;
    pragma?: string;
    pragmaFrag?: string;
    throwIfNamespace?: boolean;
    development?: boolean;
    useBuiltins?: boolean;
    refresh?: boolean;
};
type SWCConfig = BaseSWCConfig & {
    $schema?: string;
    jsc?: BaseSWCConfig["jsc"] & {
        target?: JscTarget;
        parser?: ParserConfig & {
            jsx?: boolean;
            tsx?: boolean;
            [key: string]: any;
        };
        transform?: {
            react?: ReactConfig;
            legacyDecorator?: boolean;
            decoratorMetadata?: boolean;
            useDefineForClassFields?: boolean;
            treatConstEnumAsEnum?: boolean;
            [key: string]: any;
        };
        [key: string]: any;
    };
    module?: ModuleConfig & {
        strict?: boolean;
        noInterop?: boolean;
        [key: string]: any;
    };
};
export interface TSConfig {
    compilerOptions?: CompilerOptions;
    include?: string[];
    exclude?: string[];
    files?: string[];
    extends?: string;
    references?: Array<{
        path: string;
    }>;
}
export default function convert(tsconfig: TSConfig): SWCConfig;
export { convert };
//# sourceMappingURL=index.d.ts.map