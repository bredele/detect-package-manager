"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get convert () {
        return convert;
    },
    get default () {
        return convert;
    }
});
function mapTarget(target) {
    if (target === undefined) return "es5";
    // Handle both string and enum values
    if (typeof target === "string") {
        const targetMap = {
            ES3: "es3",
            ES5: "es5",
            ES6: "es2015",
            ES2015: "es2015",
            ES2016: "es2016",
            ES2017: "es2017",
            ES2018: "es2018",
            ES2019: "es2019",
            ES2020: "es2020",
            ES2021: "es2021",
            ES2022: "es2022",
            ESNext: "esnext"
        };
        return targetMap[target] || "es5";
    }
    // Handle TypeScript ScriptTarget enum values
    switch(target){
        case 0:
            return "es3";
        case 1:
            return "es5";
        case 2:
            return "es2015";
        case 3:
            return "es2016";
        case 4:
            return "es2017";
        case 5:
            return "es2018";
        case 6:
            return "es2019";
        case 7:
            return "es2020";
        case 8:
            return "es2021";
        case 9:
            return "es2022";
        case 99:
            return "esnext";
        default:
            return "es5";
    }
}
function mapModule(module) {
    if (module === undefined) return "commonjs";
    // Handle both string and enum values
    if (typeof module === "string") {
        const moduleMap = {
            None: undefined,
            CommonJS: "commonjs",
            AMD: "amd",
            UMD: "umd",
            System: "commonjs",
            ES6: "es6",
            ES2015: "es6",
            ES2020: "es6",
            ES2022: "es6",
            ESNext: "es6",
            Node16: "nodenext",
            NodeNext: "nodenext",
            Preserve: "es6"
        };
        return moduleMap[module] || "commonjs";
    }
    // Handle TypeScript ModuleKind enum values
    switch(module){
        case 0:
            return undefined;
        case 1:
            return "commonjs";
        case 2:
            return "amd";
        case 3:
            return "umd";
        case 4:
            return "commonjs"; // SWC doesn't support System, fallback to CommonJS
        case 5:
            return "es6";
        case 6:
            return "es6";
        case 7:
            return "es6";
        case 99:
            return "es6";
        case 100:
            return "nodenext";
        case 199:
            return "nodenext";
        case 200:
            return "es6";
        default:
            return "commonjs";
    }
}
function mapJSX(jsx) {
    if (jsx === undefined) {
        return {
            jsx: false,
            tsx: false
        };
    }
    // Handle both string and enum values
    if (typeof jsx === "string") {
        if (jsx === "None") {
            return {
                jsx: false,
                tsx: false
            };
        }
        const result = {
            jsx: true,
            tsx: true
        };
        switch(jsx){
            case "Preserve":
                break; // No react transform
            case "React":
                result.react = {
                    runtime: "classic"
                };
                break;
            case "ReactJSX":
                result.react = {
                    runtime: "automatic"
                };
                break;
            case "ReactJSXDev":
                result.react = {
                    runtime: "automatic",
                    development: true
                };
                break;
            case "ReactNative":
                result.react = {
                    runtime: "classic"
                };
                break;
        }
        return result;
    }
    // Handle TypeScript JsxEmit enum values
    switch(jsx){
        case 0:
            return {
                jsx: false,
                tsx: false
            };
        case 1:
            return {
                jsx: true,
                tsx: true
            };
        case 2:
            return {
                jsx: true,
                tsx: true,
                react: {
                    runtime: "classic"
                }
            };
        case 3:
            return {
                jsx: true,
                tsx: true,
                react: {
                    runtime: "classic"
                }
            };
        case 4:
            return {
                jsx: true,
                tsx: true,
                react: {
                    runtime: "automatic"
                }
            };
        case 5:
            return {
                jsx: true,
                tsx: true,
                react: {
                    runtime: "automatic",
                    development: true
                }
            };
        default:
            return {
                jsx: false,
                tsx: false
            };
    }
}
function detectSyntax(options) {
    // If any TypeScript-specific features are enabled, use TypeScript syntax
    if (options.experimentalDecorators || options.emitDecoratorMetadata || options.strictNullChecks || options.strictFunctionTypes || options.strictPropertyInitialization) {
        return "typescript";
    }
    // Default to TypeScript if no clear indicators
    return "typescript";
}
function convert(tsconfig) {
    if (!tsconfig.compilerOptions) {
        return {
            jsc: {
                parser: {
                    syntax: "typescript"
                },
                target: "es5"
            }
        };
    }
    const { compilerOptions } = tsconfig;
    const swcConfig = {
        $schema: "https://swc.rs/schema.json"
    };
    // JSC Configuration
    swcConfig.jsc = {
        parser: {
            syntax: detectSyntax(compilerOptions)
        },
        target: mapTarget(compilerOptions.target)
    };
    // Parser options
    if (compilerOptions.jsx) {
        const jsxConfig = mapJSX(compilerOptions.jsx);
        if (swcConfig.jsc?.parser) {
            swcConfig.jsc.parser.jsx = jsxConfig.jsx;
            swcConfig.jsc.parser.tsx = jsxConfig.tsx;
        }
        if (jsxConfig.react && swcConfig.jsc) {
            swcConfig.jsc.transform = swcConfig.jsc.transform || {};
            swcConfig.jsc.transform.react = jsxConfig.react;
            // Apply JSX factory settings
            if (compilerOptions.jsxFactory && swcConfig.jsc.transform.react) {
                swcConfig.jsc.transform.react.pragma = compilerOptions.jsxFactory;
            }
            if (compilerOptions.jsxFragmentFactory && swcConfig.jsc.transform.react) {
                swcConfig.jsc.transform.react.pragmaFrag = compilerOptions.jsxFragmentFactory;
            }
            if (compilerOptions.jsxImportSource && swcConfig.jsc.transform.react) {
                swcConfig.jsc.transform.react.importSource = compilerOptions.jsxImportSource;
            }
        }
    }
    // Decorators
    if (compilerOptions.experimentalDecorators && swcConfig.jsc) {
        if (swcConfig.jsc.parser) {
            swcConfig.jsc.parser.decorators = true;
        }
        swcConfig.jsc.transform = swcConfig.jsc.transform || {};
        swcConfig.jsc.transform.legacyDecorator = true;
    }
    if (compilerOptions.emitDecoratorMetadata && swcConfig.jsc) {
        swcConfig.jsc.transform = swcConfig.jsc.transform || {};
        swcConfig.jsc.transform.decoratorMetadata = true;
    }
    // Class fields
    if (compilerOptions.useDefineForClassFields !== undefined && swcConfig.jsc) {
        swcConfig.jsc.transform = swcConfig.jsc.transform || {};
        swcConfig.jsc.transform.useDefineForClassFields = compilerOptions.useDefineForClassFields;
    }
    // External helpers
    if (compilerOptions.importHelpers && swcConfig.jsc) {
        swcConfig.jsc.externalHelpers = true;
    }
    // Path mapping
    if (compilerOptions.baseUrl && swcConfig.jsc) {
        swcConfig.jsc.baseUrl = compilerOptions.baseUrl;
    }
    if (compilerOptions.paths && swcConfig.jsc) {
        swcConfig.jsc.paths = compilerOptions.paths;
    }
    // Comments
    if (compilerOptions.removeComments === false && swcConfig.jsc) {
        swcConfig.jsc.preserveAllComments = true;
    }
    // Module configuration
    const moduleType = mapModule(compilerOptions.module);
    if (moduleType) {
        swcConfig.module = {
            type: moduleType
        };
        // Module interop
        if (compilerOptions.esModuleInterop === false && swcConfig.module) {
            swcConfig.module.noInterop = true;
        }
        // Strict mode
        if (compilerOptions.strict !== undefined && swcConfig.module) {
            swcConfig.module.strict = compilerOptions.strict;
        }
    }
    // Source maps
    if (compilerOptions.sourceMap) {
        swcConfig.sourceMaps = true;
    } else if (compilerOptions.inlineSourceMap) {
        swcConfig.sourceMaps = "inline";
    }
    if (compilerOptions.inlineSources) {
        swcConfig.inlineSourcesContent = true;
    }
    // Handle preserveConstEnums separately since it has a direct mapping
    if (compilerOptions.preserveConstEnums && swcConfig.jsc) {
        swcConfig.jsc.transform = swcConfig.jsc.transform || {};
        swcConfig.jsc.transform.treatConstEnumAsEnum = true;
    }
    return swcConfig;
}
