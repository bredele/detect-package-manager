import { test } from 'node:test';
import { strict as assert } from 'node:assert';
import { writeFileSync, mkdirSync, rmSync, existsSync } from 'fs';
import { resolve } from 'path';
import detectPackageManager from './index.js';

const TEST_DIR = resolve(process.cwd(), 'test-temp');

function setupTestDir() {
  if (existsSync(TEST_DIR)) {
    rmSync(TEST_DIR, { recursive: true });
  }
  mkdirSync(TEST_DIR, { recursive: true });
}

function cleanupTestDir() {
  if (existsSync(TEST_DIR)) {
    rmSync(TEST_DIR, { recursive: true });
  }
}

test('detectPackageManager should detect npm from package-lock.json', () => {
  setupTestDir();
  writeFileSync(resolve(TEST_DIR, 'package-lock.json'), '{}');
  
  const result = detectPackageManager(TEST_DIR);
  
  assert.equal(result.engine, 'npm');
  assert.ok(result.nodeVersion.startsWith('v'));
  assert.ok(result.engineVersion);
  
  cleanupTestDir();
});

test('detectPackageManager should detect pnpm from pnpm-lock.yaml', () => {
  setupTestDir();
  writeFileSync(resolve(TEST_DIR, 'pnpm-lock.yaml'), 'lockfileVersion: 6.0');
  
  const result = detectPackageManager(TEST_DIR);
  
  assert.equal(result.engine, 'pnpm');
  assert.ok(result.nodeVersion.startsWith('v'));
  
  cleanupTestDir();
});

test('detectPackageManager should detect yarn from yarn.lock', () => {
  setupTestDir();
  writeFileSync(resolve(TEST_DIR, 'yarn.lock'), '# This file is generated by running "yarn install"');
  
  const result = detectPackageManager(TEST_DIR);
  
  assert.equal(result.engine, 'yarn');
  assert.ok(result.nodeVersion.startsWith('v'));
  
  cleanupTestDir();
});

test('detectPackageManager should detect bun from bun.lockb', () => {
  setupTestDir();
  writeFileSync(resolve(TEST_DIR, 'bun.lockb'), 'bun-lockfile-format-v0');
  
  const result = detectPackageManager(TEST_DIR);
  
  assert.equal(result.engine, 'bun');
  assert.ok(result.nodeVersion.startsWith('v'));
  
  cleanupTestDir();
});

test('detectPackageManager should prioritize bun over other lock files', () => {
  setupTestDir();
  writeFileSync(resolve(TEST_DIR, 'package-lock.json'), '{}');
  writeFileSync(resolve(TEST_DIR, 'yarn.lock'), '# yarn');
  writeFileSync(resolve(TEST_DIR, 'pnpm-lock.yaml'), 'lockfileVersion: 6.0');
  writeFileSync(resolve(TEST_DIR, 'bun.lockb'), 'bun-lockfile-format-v0');
  
  const result = detectPackageManager(TEST_DIR);
  
  assert.equal(result.engine, 'bun');
  
  cleanupTestDir();
});

test('detectPackageManager should return node version', () => {
  setupTestDir();
  
  const result = detectPackageManager(TEST_DIR);
  
  assert.ok(result.nodeVersion.startsWith('v'));
  assert.match(result.nodeVersion, /^v\d+\.\d+\.\d+/);
  
  cleanupTestDir();
});

test('detectPackageManager should return engine version when engine is known', () => {
  setupTestDir();
  writeFileSync(resolve(TEST_DIR, 'package-lock.json'), '{}');
  
  const result = detectPackageManager(TEST_DIR);
  
  // Should be able to get npm version since npm is available
  assert.ok(result.engineVersion);
  assert.notEqual(result.engineVersion, 'unknown');
  
  cleanupTestDir();
});

test('detectPackageManager should use current working directory by default', () => {
  const result = detectPackageManager();
  
  assert.ok(result.engine);
  assert.ok(result.nodeVersion.startsWith('v'));
  assert.ok(result.engineVersion);
});

test('detectPackageManager should detect from environment variables', () => {
  setupTestDir();
  
  // Mock npm_config_user_agent
  const originalUserAgent = process.env.npm_config_user_agent;
  process.env.npm_config_user_agent = 'pnpm/8.6.12 npm/? node/v18.17.0 darwin arm64';
  
  const result = detectPackageManager(TEST_DIR);
  
  // Should detect pnpm from user agent even without lock file
  assert.equal(result.engine, 'pnpm');
  
  // Restore original environment
  if (originalUserAgent) {
    process.env.npm_config_user_agent = originalUserAgent;
  } else {
    delete process.env.npm_config_user_agent;
  }
  
  cleanupTestDir();
});

test('detectPackageManager should return unknown for engine when no detection method works', () => {
  setupTestDir();
  
  // Clear environment variables that could interfere
  const originalUserAgent = process.env.npm_config_user_agent;
  const originalExecPath = process.env.npm_execpath;
  delete process.env.npm_config_user_agent;
  delete process.env.npm_execpath;
  
  const result = detectPackageManager(TEST_DIR);
  
  // Should still return a valid structure
  assert.ok(result.engine);
  assert.ok(result.nodeVersion.startsWith('v'));
  assert.ok(typeof result.engineVersion === 'string');
  
  // Restore environment variables
  if (originalUserAgent) process.env.npm_config_user_agent = originalUserAgent;
  if (originalExecPath) process.env.npm_execpath = originalExecPath;
  
  cleanupTestDir();
});