"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _nodetest = require("node:test");
const _nodeassert = require("node:assert");
const _fs = require("fs");
const _path = require("path");
const _index = /*#__PURE__*/ _interop_require_default(require("./index.js"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const TEST_DIR = (0, _path.resolve)(process.cwd(), 'test-temp');
function setupTestDir() {
    if ((0, _fs.existsSync)(TEST_DIR)) {
        (0, _fs.rmSync)(TEST_DIR, {
            recursive: true
        });
    }
    (0, _fs.mkdirSync)(TEST_DIR, {
        recursive: true
    });
}
function cleanupTestDir() {
    if ((0, _fs.existsSync)(TEST_DIR)) {
        (0, _fs.rmSync)(TEST_DIR, {
            recursive: true
        });
    }
}
(0, _nodetest.test)('detectPackageManager should detect npm from package-lock.json', ()=>{
    setupTestDir();
    (0, _fs.writeFileSync)((0, _path.resolve)(TEST_DIR, 'package-lock.json'), '{}');
    const result = (0, _index.default)(TEST_DIR);
    _nodeassert.strict.equal(result.engine, 'npm');
    _nodeassert.strict.ok(result.nodeVersion.startsWith('v'));
    _nodeassert.strict.ok(result.engineVersion);
    cleanupTestDir();
});
(0, _nodetest.test)('detectPackageManager should detect pnpm from pnpm-lock.yaml', ()=>{
    setupTestDir();
    (0, _fs.writeFileSync)((0, _path.resolve)(TEST_DIR, 'pnpm-lock.yaml'), 'lockfileVersion: 6.0');
    const result = (0, _index.default)(TEST_DIR);
    _nodeassert.strict.equal(result.engine, 'pnpm');
    _nodeassert.strict.ok(result.nodeVersion.startsWith('v'));
    cleanupTestDir();
});
(0, _nodetest.test)('detectPackageManager should detect yarn from yarn.lock', ()=>{
    setupTestDir();
    (0, _fs.writeFileSync)((0, _path.resolve)(TEST_DIR, 'yarn.lock'), '# This file is generated by running "yarn install"');
    const result = (0, _index.default)(TEST_DIR);
    _nodeassert.strict.equal(result.engine, 'yarn');
    _nodeassert.strict.ok(result.nodeVersion.startsWith('v'));
    cleanupTestDir();
});
(0, _nodetest.test)('detectPackageManager should detect bun from bun.lockb', ()=>{
    setupTestDir();
    (0, _fs.writeFileSync)((0, _path.resolve)(TEST_DIR, 'bun.lockb'), 'bun-lockfile-format-v0');
    const result = (0, _index.default)(TEST_DIR);
    _nodeassert.strict.equal(result.engine, 'bun');
    _nodeassert.strict.ok(result.nodeVersion.startsWith('v'));
    cleanupTestDir();
});
(0, _nodetest.test)('detectPackageManager should prioritize bun over other lock files', ()=>{
    setupTestDir();
    (0, _fs.writeFileSync)((0, _path.resolve)(TEST_DIR, 'package-lock.json'), '{}');
    (0, _fs.writeFileSync)((0, _path.resolve)(TEST_DIR, 'yarn.lock'), '# yarn');
    (0, _fs.writeFileSync)((0, _path.resolve)(TEST_DIR, 'pnpm-lock.yaml'), 'lockfileVersion: 6.0');
    (0, _fs.writeFileSync)((0, _path.resolve)(TEST_DIR, 'bun.lockb'), 'bun-lockfile-format-v0');
    const result = (0, _index.default)(TEST_DIR);
    _nodeassert.strict.equal(result.engine, 'bun');
    cleanupTestDir();
});
(0, _nodetest.test)('detectPackageManager should return node version', ()=>{
    setupTestDir();
    const result = (0, _index.default)(TEST_DIR);
    _nodeassert.strict.ok(result.nodeVersion.startsWith('v'));
    _nodeassert.strict.match(result.nodeVersion, /^v\d+\.\d+\.\d+/);
    cleanupTestDir();
});
(0, _nodetest.test)('detectPackageManager should return engine version when engine is known', ()=>{
    setupTestDir();
    (0, _fs.writeFileSync)((0, _path.resolve)(TEST_DIR, 'package-lock.json'), '{}');
    const result = (0, _index.default)(TEST_DIR);
    // Should be able to get npm version since npm is available
    _nodeassert.strict.ok(result.engineVersion);
    _nodeassert.strict.notEqual(result.engineVersion, 'unknown');
    cleanupTestDir();
});
(0, _nodetest.test)('detectPackageManager should use current working directory by default', ()=>{
    const result = (0, _index.default)();
    _nodeassert.strict.ok(result.engine);
    _nodeassert.strict.ok(result.nodeVersion.startsWith('v'));
    _nodeassert.strict.ok(result.engineVersion);
});
(0, _nodetest.test)('detectPackageManager should detect from environment variables', ()=>{
    setupTestDir();
    // Mock npm_config_user_agent
    const originalUserAgent = process.env.npm_config_user_agent;
    process.env.npm_config_user_agent = 'pnpm/8.6.12 npm/? node/v18.17.0 darwin arm64';
    const result = (0, _index.default)(TEST_DIR);
    // Should detect pnpm from user agent even without lock file
    _nodeassert.strict.equal(result.engine, 'pnpm');
    // Restore original environment
    if (originalUserAgent) {
        process.env.npm_config_user_agent = originalUserAgent;
    } else {
        delete process.env.npm_config_user_agent;
    }
    cleanupTestDir();
});
(0, _nodetest.test)('detectPackageManager should return unknown for engine when no detection method works', ()=>{
    setupTestDir();
    // Clear environment variables that could interfere
    const originalUserAgent = process.env.npm_config_user_agent;
    const originalExecPath = process.env.npm_execpath;
    delete process.env.npm_config_user_agent;
    delete process.env.npm_execpath;
    const result = (0, _index.default)(TEST_DIR);
    // Should still return a valid structure
    _nodeassert.strict.ok(result.engine);
    _nodeassert.strict.ok(result.nodeVersion.startsWith('v'));
    _nodeassert.strict.ok(typeof result.engineVersion === 'string');
    // Restore environment variables
    if (originalUserAgent) process.env.npm_config_user_agent = originalUserAgent;
    if (originalExecPath) process.env.npm_execpath = originalExecPath;
    cleanupTestDir();
});

//# sourceMappingURL=index.test.js.map