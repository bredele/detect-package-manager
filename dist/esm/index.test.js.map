{"version":3,"sources":["../../src/index.test.ts"],"sourcesContent":["import { test } from 'node:test';\nimport { strict as assert } from 'node:assert';\nimport { writeFileSync, mkdirSync, rmSync, existsSync } from 'fs';\nimport { resolve } from 'path';\nimport detectPackageManager from './index.js';\n\nconst TEST_DIR = resolve(process.cwd(), 'test-temp');\n\nfunction setupTestDir() {\n  if (existsSync(TEST_DIR)) {\n    rmSync(TEST_DIR, { recursive: true });\n  }\n  mkdirSync(TEST_DIR, { recursive: true });\n}\n\nfunction cleanupTestDir() {\n  if (existsSync(TEST_DIR)) {\n    rmSync(TEST_DIR, { recursive: true });\n  }\n}\n\ntest('detectPackageManager should detect npm from package-lock.json', () => {\n  setupTestDir();\n  writeFileSync(resolve(TEST_DIR, 'package-lock.json'), '{}');\n  \n  const result = detectPackageManager(TEST_DIR);\n  \n  assert.equal(result.engine, 'npm');\n  assert.ok(result.nodeVersion.startsWith('v'));\n  assert.ok(result.engineVersion);\n  \n  cleanupTestDir();\n});\n\ntest('detectPackageManager should detect pnpm from pnpm-lock.yaml', () => {\n  setupTestDir();\n  writeFileSync(resolve(TEST_DIR, 'pnpm-lock.yaml'), 'lockfileVersion: 6.0');\n  \n  const result = detectPackageManager(TEST_DIR);\n  \n  assert.equal(result.engine, 'pnpm');\n  assert.ok(result.nodeVersion.startsWith('v'));\n  \n  cleanupTestDir();\n});\n\ntest('detectPackageManager should detect yarn from yarn.lock', () => {\n  setupTestDir();\n  writeFileSync(resolve(TEST_DIR, 'yarn.lock'), '# This file is generated by running \"yarn install\"');\n  \n  const result = detectPackageManager(TEST_DIR);\n  \n  assert.equal(result.engine, 'yarn');\n  assert.ok(result.nodeVersion.startsWith('v'));\n  \n  cleanupTestDir();\n});\n\ntest('detectPackageManager should detect bun from bun.lockb', () => {\n  setupTestDir();\n  writeFileSync(resolve(TEST_DIR, 'bun.lockb'), 'bun-lockfile-format-v0');\n  \n  const result = detectPackageManager(TEST_DIR);\n  \n  assert.equal(result.engine, 'bun');\n  assert.ok(result.nodeVersion.startsWith('v'));\n  \n  cleanupTestDir();\n});\n\ntest('detectPackageManager should prioritize bun over other lock files', () => {\n  setupTestDir();\n  writeFileSync(resolve(TEST_DIR, 'package-lock.json'), '{}');\n  writeFileSync(resolve(TEST_DIR, 'yarn.lock'), '# yarn');\n  writeFileSync(resolve(TEST_DIR, 'pnpm-lock.yaml'), 'lockfileVersion: 6.0');\n  writeFileSync(resolve(TEST_DIR, 'bun.lockb'), 'bun-lockfile-format-v0');\n  \n  const result = detectPackageManager(TEST_DIR);\n  \n  assert.equal(result.engine, 'bun');\n  \n  cleanupTestDir();\n});\n\ntest('detectPackageManager should return node version', () => {\n  setupTestDir();\n  \n  const result = detectPackageManager(TEST_DIR);\n  \n  assert.ok(result.nodeVersion.startsWith('v'));\n  assert.match(result.nodeVersion, /^v\\d+\\.\\d+\\.\\d+/);\n  \n  cleanupTestDir();\n});\n\ntest('detectPackageManager should return engine version when engine is known', () => {\n  setupTestDir();\n  writeFileSync(resolve(TEST_DIR, 'package-lock.json'), '{}');\n  \n  const result = detectPackageManager(TEST_DIR);\n  \n  // Should be able to get npm version since npm is available\n  assert.ok(result.engineVersion);\n  assert.notEqual(result.engineVersion, 'unknown');\n  \n  cleanupTestDir();\n});\n\ntest('detectPackageManager should use current working directory by default', () => {\n  const result = detectPackageManager();\n  \n  assert.ok(result.engine);\n  assert.ok(result.nodeVersion.startsWith('v'));\n  assert.ok(result.engineVersion);\n});\n\ntest('detectPackageManager should detect from environment variables', () => {\n  setupTestDir();\n  \n  // Mock npm_config_user_agent\n  const originalUserAgent = process.env.npm_config_user_agent;\n  process.env.npm_config_user_agent = 'pnpm/8.6.12 npm/? node/v18.17.0 darwin arm64';\n  \n  const result = detectPackageManager(TEST_DIR);\n  \n  // Should detect pnpm from user agent even without lock file\n  assert.equal(result.engine, 'pnpm');\n  \n  // Restore original environment\n  if (originalUserAgent) {\n    process.env.npm_config_user_agent = originalUserAgent;\n  } else {\n    delete process.env.npm_config_user_agent;\n  }\n  \n  cleanupTestDir();\n});\n\ntest('detectPackageManager should return unknown for engine when no detection method works', () => {\n  setupTestDir();\n  \n  // Clear environment variables that could interfere\n  const originalUserAgent = process.env.npm_config_user_agent;\n  const originalExecPath = process.env.npm_execpath;\n  delete process.env.npm_config_user_agent;\n  delete process.env.npm_execpath;\n  \n  const result = detectPackageManager(TEST_DIR);\n  \n  // Should still return a valid structure\n  assert.ok(result.engine);\n  assert.ok(result.nodeVersion.startsWith('v'));\n  assert.ok(typeof result.engineVersion === 'string');\n  \n  // Restore environment variables\n  if (originalUserAgent) process.env.npm_config_user_agent = originalUserAgent;\n  if (originalExecPath) process.env.npm_execpath = originalExecPath;\n  \n  cleanupTestDir();\n});"],"names":["test","strict","assert","writeFileSync","mkdirSync","rmSync","existsSync","resolve","detectPackageManager","TEST_DIR","process","cwd","setupTestDir","recursive","cleanupTestDir","result","equal","engine","ok","nodeVersion","startsWith","engineVersion","match","notEqual","originalUserAgent","env","npm_config_user_agent","originalExecPath","npm_execpath"],"mappings":"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"}